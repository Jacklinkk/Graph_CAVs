"""
    This function is used to define the explorer strategy in DRL, specifically:
    1. constant epsilon greedy strategy
    2. linear decay epsilon greedy strategy
    3. exponential decay epsilon greedy strategy
"""
import torch
import numpy as np


def random_action(original_action):
    """
        <Random action function>
        Action selection based on the characteristics of the actions
        generated by the GRL model.

        Parameters：
        ------
        original_action: Original actions generated by the GRL neural network model

        !!! IMPORTANT !!!
        This function needs to be adapted to the characteristics of the action space
        (range of values, dimensionality, etc.)
    """
    action = np.random.randint(original_action['action_min'] * 10,
                               original_action['action_max'] * 10,
                               size=len(original_action['action'])) / 10
    action = torch.as_tensor(action, dtype=torch.long)
    return action


class Greedy(object):
    """
        Greedy strategy
    """

    def __init__(self):
        """
            <Constructor>
        """

    def generate_action(self, original_action):
        """
            <Fully greedy action functions>
            Selection of greedy actions based on the characteristics of
            the actions generated by the GRL model.

            Parameters：
            ------
            original_action: Original actions generated by the GRL neural network model
        """
        return original_action


class ConstantEpsilonGreedy(object):
    """
        Epsilon-greedy with constant epsilon.
    """

    def __init__(self, epsilon):
        """
            <Constructor>

            Parameters：
            ------
            epsilon: Exploration rate [0,1];
            if epsilon=0: Completely random strategy
            if epsilon=1: Completely greed strategy
        """
        assert 0 <= epsilon <= 1
        self.epsilon = epsilon

    def generate_action(self, original_action):
        """
            <Action generation function>
            Ensure that the agent selects the actions generated by the GRL model
            according to the established policy.

            Parameters：
            ------
            original_action: Original actions generated by the GRL neural network model
        """
        if np.random.random() > self.epsilon:  # Greedy
            action = original_action['action']
        else:  # Random
            action = random_action(original_action)
        return action


class LinearDecayEpsilonGreedy(object):
    """
        Epsilon-greedy with linearly decayed epsilon.
    """

    def __init__(self, start_epsilon, end_epsilon, decay_step):
        """
            <Constructor>

            Parameters：
            ------
            start_epsilon: the epsilon at the beginning
            end_epsilon: epsilon at the end
            decay_step: epsilon decay step
        """
        assert 0 <= start_epsilon <= 1
        assert 0 <= end_epsilon <= 1
        assert decay_step >= 0
        self.start_epsilon = start_epsilon
        self.end_epsilon = end_epsilon
        self.decay_step = decay_step
        self.counters = 0
        self.epsilon = start_epsilon

    def compute_epsilon(self):
        """
            <Epsilon calculation function>
            This function is used to calculate the epsilon at different time step.
        """
        if self.counters > self.decay_step:
            epsilon = self.end_epsilon
            self.counters += 1
            return epsilon
        else:
            epsilon_diff = self.end_epsilon - self.start_epsilon
            epsilon = self.start_epsilon + epsilon_diff * (self.counters / self.decay_step)
            self.counters += 1
            return epsilon

    def generate_action(self, original_action):
        """
            <Action generation function>
            Ensure that the agent selects the actions generated by the GRL model
            according to the established policy.

            Parameters：
            ------
            original_action: Original actions generated by the GRL neural network model
        """
        self.epsilon = self.compute_epsilon()
        if np.random.random() > self.epsilon:
            action = original_action['action']
        else:
            action = random_action(original_action)
        return action


class ExponentialDecayEpsilonGreedy(object):
    """
        Epsilon-greedy with exponential decayed epsilon.
    """

    def __init__(self, start_epsilon, end_epsilon, decay):
        """
            <Constructor>

            Parameters：
            ------
            start_epsilon: the epsilon at the beginning
            end_epsilon: epsilon at the end
            decay_step: epsilon decay step
        """
        assert 0 <= start_epsilon <= 1
        assert 0 <= end_epsilon <= 1
        assert 0 < decay < 1
        self.start_epsilon = start_epsilon
        self.end_epsilon = end_epsilon
        self.decay = decay
        self.counters = 0
        self.epsilon = start_epsilon

    def compute_epsilon(self):
        """
            <Epsilon calculation function>
            This function is used to calculate the epsilon at different time step.
        """
        epsilon = self.start_epsilon * (self.decay ** self.counters)
        self.counters += 1
        return max(epsilon, self.end_epsilon)

    def generate_action(self, original_action):
        """
            <Action generation function>
            Ensure that the agent selects the actions generated by the GRL model
            according to the established policy.

            Parameters：
            ------
            original_action: Original actions generated by the GRL neural network model
        """
        self.epsilon = self.compute_epsilon()
        if np.random.random() > self.epsilon:
            action = original_action['action']
        else:
            action = random_action(original_action)
        return action
